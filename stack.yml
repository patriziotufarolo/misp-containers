version: '3.1'

networks:
  misp-backend:
    driver: overlay 

volumes:
  misp-source:
  misp-config:
  misp-logs:
  misp-database:

services:
  misp:
    build: misp
    image: misp
    restart: unless-stopped
    volumes:
      - misp-source:/var/www/MISP
      - misp-config:/var/www/MISP/app/Config
    networks:
      misp-backend:
        aliases:
          - ${MISP_CONTAINER_ALIAS}
    env_file:
      - .worker.env 
      - .env

  #misp-configurator:
  #  build: misp-configurator
  #  image: misp-configurator
  #  volumes:
  #    - misp-source:/var/www/MISP
  #    - misp-config:/var/www/MISP/app/Config

  frontend:
    build: frontend
    image: misp-fe
    restart: unless-stopped
    depends_on:
      - misp
    volumes:
      - misp-source:/var/www/MISP
      - misp-config:/var/www/MISP/app/Config
    ports:
      - 80:80
      - 443:443
    networks:
      misp-backend:
        aliases:
          - ${FRONTEND_CONTAINER_ALIAS}

  database:
    build: db
    image: misp-db
    restart: always
    env_file: .env
    depends_on:
      - misp
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} 
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - misp-database:/usr/local/mysql/data/
    networks:
      misp-backend:
        aliases:
          - ${DB_CONTAINER_ALIAS}

  modules:
    build: modules
    image: misp-modules
    restart: always
    networks:
      misp-backend:
        aliases:
          - ${MODULES_CONTAINER_ALIAS}


  redis:
    image: redis:5
    restart: always
    networks:
      misp-backend:
        aliases:
          - redis
    command: "redis-server --appendonly yes"

  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      misp-backend:
        aliases:
          - redis-commander

  worker_default:
    build: worker
    image: worker
    pid: "service:misp"
    restart: always
    volumes:
      - misp-source:/var/www/MISP:rw
      - misp-config:/var/www/MISP/app/Config
    depends_on:
      - misp
    networks:
      misp-backend:
    command: ["CakeResque.CakeResque", "start", "--interval", "5", "--queue", "default", "--log-handler", "Docker", "-v", "-d"] 
    env_file:
      - .worker.env

  worker_email:
    build: worker 
    image: worker
    restart: always
    pid: "service:misp"
    volumes:
      - misp-source:/var/www/MISP:rw
      - misp-config:/var/www/MISP/app/Config
    depends_on:
      - misp
    networks:
      misp-backend:
    command: ["CakeResque.CakeResque", "start", "--interval", "5", "--queue", "email", "--log-handler", "Docker", "-v", "-d"] 
    env_file:
      - .worker.env



  worker_prio:
    build: worker 
    image: worker
    restart: always
    pid: "service:misp"
    volumes:
      - misp-source:/var/www/MISP:rw
      - misp-config:/var/www/MISP/app/Config
    depends_on:
      - misp
    networks:
      misp-backend:
    command: ["CakeResque.CakeResque", "start", "--interval", "5", "--queue", "prio", "--log-handler", "Docker", "-v", "-d"] 
    env_file:
      - .worker.env


  worker_cache:
    build: worker 
    image: worker
    restart: always
    pid: "service:misp"
    volumes:
      - misp-source:/var/www/MISP:rw
      - misp-config:/var/www/MISP/app/Config
    depends_on:
      - misp
    networks:
      misp-backend:
    command: ["CakeResque.CakeResque", "start", "--interval", "5", "--queue", "cache", "--log-handler", "Docker", "-v", "-d"] 
    env_file:
      - .worker.env

  worker_scheduler:
    build: worker
    image: worker
    restart: always
    pid: "service:misp"
    volumes:
      - misp-source:/var/www/MISP:rw
      - misp-config:/var/www/MISP/app/Config
    depends_on:
      - misp
    networks:
      misp-backend:
    command: ["CakeResque.CakeResque", "start", "--interval", "5", "--queue", "scheduler", "--log-handler", "Docker", "-v", "-d"] 
    env_file:
      - .worker.env

  worker_update:
    build: worker 
    image: worker
    restart: always
    pid: "service:misp"
    volumes:
      - misp-source:/var/www/MISP:rw
      - misp-config:/var/www/MISP/app/Config
    depends_on:
      - misp
    networks:
      misp-backend:

    command: ["CakeResque.CakeResque", "start", "--interval", "5", "--queue", "update", "--log-handler", "Docker", "-v", "-d"] 
    env_file:
      - .worker.env
